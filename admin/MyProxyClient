#!/usr/bin/env python
#
# Originally from myproxy_logon script:
# http://www.mcs.anl.gov/fl/research/accessgrid/myproxy/myproxy_logon.py
# By Tom Uram <turam@mcs.anl.gov> on 2005/08/04
#
# Adapted/improved by
# Diego da Silva Gomes <diego@cern.ch>
# on 2013/04/08 for use by CMSWEB services.

import socket
import re
from OpenSSL import crypto, SSL

# we don't require password as we only want to allow x509 authentication
CMD_GET="""VERSION=MYPROXYv2
COMMAND=0
USERNAME=%s
PASSPHRASE=
LIFETIME=%d\0"""

CMD_INFO="""VERSION=MYPROXYv2
COMMAND=2
USERNAME=%s
PASSPHRASE=PASSPHRASE
LIFETIME=0\0"""

class MyProxyException(Exception): pass

def myproxy_ctx(certfile, keyfile):
    ctx = SSL.Context(SSL.SSLv3_METHOD)
    ctx.use_certificate_chain_file(certfile)
    ctx.use_privatekey_file(keyfile)

    # disable for compatibility with myproxy server (er, globus)
    # globus doesn't handle this case, apparently, and instead
    # chokes in proxy delegation code
    ctx.set_options(SSL.OP_DONT_INSERT_EMPTY_FRAGMENTS)

    return ctx


def create_cert_req(keyType = crypto.TYPE_RSA,
                    bits = 1024,
                    messageDigest = "md5"):
    """
    Create certificate request.

    Returns: certificate request PEM text, private key PEM text
    """

    # Create certificate request
    req = crypto.X509Req()

    # Generate private key
    pkey = crypto.PKey()
    pkey.generate_key(keyType, bits)

    req.set_pubkey(pkey)
    req.sign(pkey, messageDigest)

    return (crypto.dump_certificate_request(crypto.FILETYPE_ASN1,req),
           crypto.dump_privatekey(crypto.FILETYPE_PEM,pkey))


def deserialize_response(msg):
    m = re.search('RESPONSE=(\d)\n', msg)
    if m: resp = int(m.group(1))
    else: resp = 1 # set error if response not found

    errors = ", ".join(re.findall('^ERROR=(.*?)\n', msg, re.MULTILINE))
    data = "".join(re.findall('^(?!VERSION|RESPONSE|ERROR)(.*?\n)', msg, re.MULTILINE))
    return resp, errors, data


def deserialize_certs(inp_dat):

    pem_certs = []

    dat = inp_dat

    import base64
    while dat:

        # find start of cert, get length
        ind = dat.find('\x30\x82')
        if ind < 0:
            break

        len = 256*ord(dat[ind+2]) + ord(dat[ind+3])

        # extract der-format cert, and convert to pem
        c = dat[ind:ind+len+4]
        x509 = crypto.load_certificate(crypto.FILETYPE_ASN1,c)
        pem_cert = crypto.dump_certificate(crypto.FILETYPE_PEM,x509)
        pem_certs.append(pem_cert)

        # trim cert from data
        dat = dat[ind + len + 4:]

    return pem_certs


def myproxy_client(sslctx, op, username, lifetime=43200, host="myproxy.cern.ch", port=7512, debug=lambda x: 0):
    """
    Function to info|get a proxy credential from a MyProxy server

    Exceptions: MyProxyException or any of the SSL exceptions
    """
    if op not in ['info', 'get']: raise MyProxyException('Wrong operation. Select "info" or "get".')

    debug("debug: connect to myproxy server")
    conn = SSL.Connection(sslctx,socket.socket())
    conn.connect((host,port))

    debug("debug: send globus compat byte")
    conn.write('0')

    debug("debug: send the operation command")
    if op == 'info':  cmd = CMD_INFO % username
    else:             cmd = CMD_GET % (username, lifetime)
    conn.write(cmd)

    debug("debug: process server response")
    d = conn.recv(8192)
    debug(d)

    resp, error, data = deserialize_response(d)
    if resp: raise MyProxyException(error)
    debug("debug: server response ok")

    if op == 'get':
      # The client will generate a public/private key pair and send a
      # NULL-terminated PKCS#10 certificate request to the server.
      debug("debug: generate and send certificate request")
      certreq, privkey = create_cert_req()
      conn.send(certreq)

      debug("debug: receive the number of certs")
      d = conn.recv(1)
      numcerts = ord(d[0])

      debug("debug: receive %d certs" % numcerts)
      d = conn.recv(8192)

      debug("debug: process server response")
      r = conn.recv(8192)
      resp, error, data = deserialize_response(r)
      if resp: raise RetrieveProxyException(error)
      debug("debug: server response ok")

      # deserialize certs from received cert data
      pem_certs = deserialize_certs(d)
      if len(pem_certs) != numcerts:
          raise MyProxyException("%d certs expected, %d received" % (numcerts,len(pem_certs)))
      debug("debug: certs deserialized successfuly")

      # return proxy, the corresponding privkey, and then the rest of cert chain
      data = pem_certs[0] + privkey
      for c in pem_certs[1:]: data += c

    return data


if __name__ == '__main__':
    import sys
    import optparse

    parser = optparse.OptionParser()
    parser.add_option("-o", "--op", dest="op",
                       help="Operation: info|get")
    parser.add_option("-s", "--pshost", dest="host", default="myproxy.cern.ch",
                       help="The hostname of the MyProxy server to contact")
    parser.add_option("-p", "--psport", dest="port", default=7512,
                       help="The port of the MyProxy server to contact")
    parser.add_option("-l", "--username", dest="username",
                       help="The username with which the credential is stored on the MyProxy server")
    parser.add_option("-C", "--certfile", dest="cert",
                       help="Certificate PEM filename to use with myproxy authentication")
    parser.add_option("-y", "--keyfile", dest="key",
                       help="Certkey PEM filename to use with myproxy authentication")
    parser.add_option("-t", "--proxy_lifetime", dest="lifetime", default=43200,
                       help="The lifetime validity for the fetched proxy.")
    parser.add_option("-v", "--verbose", action="store_true", dest="debug", default=False,
                       help="Print debug information to stdout.")
    (opt,args) = parser.parse_args()

    # process options
    if not opt.op or opt.op not in ['info', 'get']:
        print >> sys.stderr, "Error: incorrect operation, use --op (see -h for help)"
        sys.exit(1)
    if not opt.username:
        print >> sys.stderr, "Error: username not specified, use --username (see -h for help)"
        sys.exit(1)
    if not opt.cert or not opt.key:
        print >> sys.stderr, "Error: certificate/key not specified, use --certfile and --keyfile (see -h for help)"
        sys.exit(1)
    dbgfunc = lambda x: sys.stdout.write(x+'\n') if opt.debug else 0

    # Do the operation
    try:
        ctx = myproxy_ctx(opt.cert, opt.key)
        ret = myproxy_client(ctx, opt.op, opt.username, lifetime=int(opt.lifetime),
                             host=opt.host, port=int(opt.port), debug=dbgfunc)
        sys.stdout.write(ret)
    except Exception,e:
        if opt.debug:
            import traceback
            traceback.print_exc()
        print >> sys.stderr, "Error:", e
        sys.exit(1)

